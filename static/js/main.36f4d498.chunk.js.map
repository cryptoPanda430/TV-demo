{"version":3,"sources":["components/ChartArea.js","components/services/GenerateURL.js","App.js","reportWebVitals.js","index.js"],"names":["ChartArea","chartContainerRef","useRef","chart","resizeObserver","useState","timer","setTimer","areaSeries","itemInput","setItemInput","templateName","setTemplateName","issuedSupply","setIssuedSupply","adjustedSupply","setAdjustedSupply","lastSalePrice","setLastSalePrice","marketCap","setMarketCap","burnTotal","setBurnTotal","dataURL","setDataURL","salesURL","setSalesURL","BurnURL","setBurnURL","templateID","setTemplateID","collectionName","setCollectionName","setApiResponse","formatFloat","float","precision","Intl","NumberFormat","maximumFractionDigits","minimumFractionDigits","format","useEffect","replace","templateInput","templateSalesURL","apiResponse","axios","get","then","response","JSON","stringify","data","current","setData","responseCount","length","price","allSalePrices","parseFloat","toFixed","forEach","sale","formattedPrice","push","update","time","block_time","value","minMax","arr","min","max","i","getMinMax","applyOptions","autoscaleInfoProvider","priceRange","minValue","maxValue","timeScale","fitContent","catch","error","collection","name","template","immutable_data","issued_supply","console","log","burnDataURL","burned","createChart","width","clientWidth","height","clientHeight","handleScroll","handleScale","layout","backgroundColor","textColor","grid","vertLines","color","visible","labelVisible","horzLines","crosshair","mode","CrosshairMode","Normal","priceScale","borderColor","autoScale","timeVisible","secondsVisible","addAreaSeries","setTimeout","prevstate","ResizeObserver","entries","contentRect","observe","disconnect","style","paddingTop","paddingBottom","Grid","container","align","justifyContent","alignItems","item","xs","sm","md","className","fontSize","action","onSubmit","e","preventDefault","target","elements","htmlFor","type","onChange","event","placeholder","id","textAlign","borderRadius","border","borderTopLeftRadius","borderBottomLeftRadius","Button","variant","borderTopRightRadius","borderBottomRightRadius","ref","App","basename","process","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.36f4d498.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport WhatshotTwoToneIcon from '@material-ui/icons/WhatshotTwoTone';\r\nimport { createChart, CrosshairMode } from 'lightweight-charts';\r\nimport axios from 'axios'\r\nimport { templateSalesURL, templateDataURL, burnDataURL } from './services/GenerateURL';\r\nimport './styles.css';\r\n\r\nconst ChartArea = () => {\r\n  const chartContainerRef = useRef();\r\n  const chart = useRef();\r\n  const resizeObserver = useRef();\r\n  const [timer, setTimer] = useState(0);\r\n  let areaSeries = useRef();\r\n  const [itemInput, setItemInput] = useState(''); \r\n  const [templateName, setTemplateName] = useState('');\r\n  const [issuedSupply, setIssuedSupply] = useState('');\r\n  const [adjustedSupply, setAdjustedSupply] = useState('');\r\n  const [lastSalePrice, setLastSalePrice] = useState('');\r\n  const [marketCap, setMarketCap] = useState('');\r\n  const [burnTotal, setBurnTotal] = useState('');\r\n  const [dataURL,setDataURL] = useState('')\r\n  const [salesURL,setSalesURL] = useState('')\r\n  const [BurnURL, setBurnURL] = useState('');\r\n  const [templateID, setTemplateID] = useState(19553);\r\n  const [collectionName, setCollectionName] = useState('alien.worlds');\r\n  const [apiResponse, setApiResponse] = useState([]);\r\n  // const [templateImage, setTemplateImage] = useState('');\r\n  // const imgURLBase = \"https://ipfs.atomichub.io/ipfs/\";\r\n  // const imgURLBase = \"https://resizer.atomichub.io/images/v1/preview?ipfs=\";\r\n\r\n  useEffect(()=>{\r\n    setDataURL(templateDataURL(templateID))\r\n    setSalesURL(templateSalesURL(templateID))\r\n  }, [templateID])\r\n\r\n  useEffect(apiResponse => {\r\n    axios.get(salesURL)\r\n        .then((response) => {\r\n          if (JSON.stringify(response.data.data) !== JSON.stringify(apiResponse)){\r\n            areaSeries.current.setData([])\r\n            setApiResponse(response.data.data)\r\n            let responseCount = response.data.data.length-1\r\n            let lastSalePrice = response.data.data[responseCount].price / 100000000\r\n            let allSalePrices = []\r\n            setLastSalePrice(parseFloat(lastSalePrice).toFixed(2))\r\n            response.data.data.forEach(function(sale) { \r\n              const formattedPrice = (sale.price / 100000000).toFixed(2);\r\n              allSalePrices.push(parseFloat(formattedPrice))\r\n              areaSeries.current.update(\r\n                { time: sale.block_time/1000, value: formattedPrice },\r\n              )\r\n            });\r\n            let minMax = getMinMax(allSalePrices)\r\n            areaSeries.current.applyOptions({\r\n              autoscaleInfoProvider: () => ({\r\n                  priceRange: {\r\n                      minValue: minMax.min,\r\n                      maxValue: minMax.max,\r\n                  },\r\n              }),\r\n            });\r\n            // setTimeout(() => {\r\n              chart.current.timeScale().fitContent();\r\n            // }, 0);\r\n          }\r\n        })\r\n        .catch(function (error){\r\n        })\r\n  }, [salesURL])\r\n\r\n  useEffect(() => {\r\n    axios.get(dataURL)\r\n      .then((response) => {\r\n        setCollectionName(response.data.data[0].collection.name)\r\n        setTemplateName(response.data.data[0].template.immutable_data.name)\r\n        // setTemplateImage(imgURLBase+response.data.data[0].template.immutable_data.img+\"&size=370\")          \r\n        // setTemplateImage(imgURLBase+response.data.data[0].template.immutable_data.img)\r\n        setIssuedSupply(response.data.data[0].template.issued_supply)\r\n      })\r\n      .catch(function (error){\r\n        console.log(error)\r\n      })\r\n  }, [dataURL])\r\n\r\n  useEffect(() =>{\r\n    setBurnURL(burnDataURL(templateID, collectionName))\r\n  }, [collectionName])\r\n\r\n  useEffect(() =>{\r\n    axios.get(BurnURL)\r\n      .then((response) => {\r\n        setBurnTotal(response.data.data.burned)\r\n      })\r\n      .catch(function (error){\r\n        console.log(error)\r\n      })\r\n  }, [BurnURL])\r\n\r\n  useEffect(()=>{\r\n    if(lastSalePrice === \"\" || issuedSupply === \"\"){\r\n      return\r\n    } else {\r\n      // Calculate and format market cap \r\n      let marketCap = parseFloat(lastSalePrice*(issuedSupply-burnTotal)).toFixed(2)\r\n      setMarketCap(marketCap)\r\n      // setIssuedSupply(issuedSupply)\r\n      setAdjustedSupply(issuedSupply-burnTotal)\r\n    }\r\n  }, [lastSalePrice, issuedSupply, burnTotal])\r\n\r\n  useEffect(() => {\r\n    chart.current = createChart(chartContainerRef.current, {\r\n      width: chartContainerRef.current.clientWidth,\r\n      height: chartContainerRef.current.clientHeight,\r\n      handleScroll: true,\r\n      handleScale: true,\r\n      layout: {\r\n        backgroundColor: '#253248',\r\n        textColor: 'rgba(255, 255, 255, 0.9)',\r\n      },\r\n      grid: {\r\n        vertLines: {\r\n          color: '#334158',\r\n          visible: false,\r\n          labelVisible: false,\r\n        },\r\n        horzLines: {\r\n          color: '#334158',\r\n          visible: false,\r\n          labelVisible: false,\r\n        },\r\n      },\r\n      crosshair: {\r\n        mode: CrosshairMode.Normal,\r\n      },\r\n      priceScale: {\r\n        borderColor: '#485c7b',\r\n        autoScale: true,\r\n      },\r\n      timeScale: {\r\n        borderColor: '#485c7b',\r\n        timeVisible: true,\r\n        secondsVisible: false,\r\n      },\r\n    });\r\n    areaSeries.current = chart.current.addAreaSeries({});\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n      setTimeout(() =>{\r\n          setTimer(prevstate => prevstate+1);\r\n      }, 5000)\r\n  }, [timer])\r\n\r\n  // Resize chart on container resizes.\r\n  useEffect(() => {\r\n    resizeObserver.current = new ResizeObserver(entries => {\r\n      const { width, height } = entries[0].contentRect;\r\n      chart.current.applyOptions({ width, height });\r\n      setTimeout(() => {\r\n        chart.current.timeScale().fitContent();\r\n      }, 0);\r\n    });\r\n    resizeObserver.current.observe(chartContainerRef.current);\r\n    return () => resizeObserver.current.disconnect();\r\n  }, []);\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n    const templateInput = e.target.elements[0].value;\r\n    setTemplateID(templateInput)\r\n  }\r\n\r\n  function formatFloat(float, precision) {\r\n    let formattedFloat;\r\n    formattedFloat = new Intl.NumberFormat('en',{ \r\n      maximumFractionDigits: precision, \r\n      minimumFractionDigits: precision, \r\n    }).format(float)\r\n    return formattedFloat\r\n  }\r\n\r\n  function getMinMax(arr) {\r\n    let min = arr[0];\r\n    let max = arr[0];\r\n    let i = arr.length;\r\n    while (i--) {\r\n      min = arr[i] < min ? arr[i] : min;\r\n      max = arr[i] > max ? arr[i] : max;\r\n    }\r\n    return { min, max };\r\n  }\r\n\r\n  return (\r\n    <>\r\n    <div style={{paddingTop:15,paddingBottom:15, backgroundColor:\"#253248\", color:\"white\", }}>\r\n      <Grid container align = \"center\" justifyContent = \"center\" alignItems = \"center\">\r\n        <Grid item xs={12} sm={12} md={2} className=\"grid-item\">\r\n          <code>{collectionName}</code>          \r\n          <h3>{templateName}</h3>\r\n        </Grid>\r\n        {/* <Grid item xs={12} sm={12} md={1} className=\"grid-item\">\r\n          <img src={templateImage} alt={templateName} width=\"100px\"/>\r\n        </Grid>*/}\r\n        <Grid item xs={12} sm={4} md={2} className=\"grid-item\">\r\n          <code>Supply</code>\r\n          <h3>\r\n            {formatFloat(adjustedSupply, 0)} <small>({formatFloat(burnTotal, 0)}<WhatshotTwoToneIcon className=\"burn-icon\" fontSize=\"small\"/>)</small>\r\n          </h3>\r\n          <div>\r\n            <h5></h5>\r\n          </div>\r\n        </Grid>\r\n        <Grid item xs={12} sm={4} md={2} className=\"grid-item\">\r\n          <code>Last Sale Price</code>\r\n          <h3>{formatFloat(lastSalePrice, 2)} WAX</h3>\r\n        </Grid>\r\n        <Grid item xs={12} sm={4} md={2} className=\"grid-item\">\r\n          <code>Market Cap</code>\r\n          <h3>{formatFloat(marketCap, 2)} WAX</h3> \r\n        </Grid>\r\n        <Grid item xs={12} sm={12} md={3} className=\"grid-item\">\r\n          <form action=\"\" onSubmit={handleSubmit}>\r\n            <label htmlFor=\"\">\r\n              <input type=\"text\" onChange={event => setItemInput(event.target.value)} value={itemInput} placeholder=\"Enter Template ID\" name=\"\" id=\"\" style={{height: 31, width: 115, textAlign: 'center', borderRadius: '0px', border: 'none', borderTopLeftRadius:\"2px\",borderBottomLeftRadius:\"2px\"}} />\r\n            </label>    \r\n            <Button variant=\"contained\" color=\"primary\" type=\"submit\" style={{borderRadius: \"0px\",backgroundColor: \"#2b8660\", fontSize:\"12px\",borderTopRightRadius:\"2px\",borderBottomRightRadius:\"2px\"}}>\r\n              <code>Search</code>\r\n            </Button>\r\n          </form>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n    <div ref={chartContainerRef} className=\"chart-container\" />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ChartArea","export function accountURL(accountInput) {\r\n  const URLSchematic = \"https://wax.api.atomicassets.io/atomicassets/v1/accounts?match={{walletAddres}}\";\r\n  return URLSchematic.replace('{{walletAddres}}',accountInput)\r\n}\r\nexport function baseURL(accountInput) {\r\n  const URLSchematic = \"https://wax.api.atomicassets.io/atomicassets/v1/assets?owner={{walletAddres}}\";\r\n  return URLSchematic.replace('{{walletAddres}}',accountInput)\r\n}\r\n\r\nexport function templateSalesURL(templateInput) {\r\n  const URLSchematic = \"https://wax.api.atomicassets.io/atomicmarket/v1/prices/sales?template_id={{templateID}}\";\r\n  return URLSchematic.replace('{{templateID}}',templateInput)\r\n}\r\n\r\nexport function templateDataURL(templateInput) {\r\n  const URLSchematic = \"https://wax.api.atomicassets.io/atomicassets/v1/assets?template_id={{templateID}}&page=1&limit=1&order=desc&sort=asset_id\";\r\n  return URLSchematic.replace('{{templateID}}',templateInput)\r\n}\r\n\r\nexport function burnDataURL(templateInput, collectionName) {\r\n  const URLSchematic = \"https://wax.api.atomicassets.io/atomicassets/v1/templates/{{collectionName}}/{{templateID}}/stats\";\r\n  // debugger;\r\n  return URLSchematic.replace('{{templateID}}',templateInput).replace('{{collectionName}}',collectionName)\r\n}\r\n","import './App.css';\r\nimport ChartArea from './components/ChartArea';\r\nimport { HashRouter as Router } from 'react-router-dom'\r\nimport {Switch, Route} from 'react-router-dom'\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n    <Router basename={process.env.PUBLIC_URL}>\r\n        <Switch>\r\n            <Route exact path=\"/\">\r\n                <div className=\"App\">\r\n                    <ChartArea />\r\n                </div>\r\n            </Route>\r\n        </Switch>\r\n    </Router>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n// ReactDOM.render(\r\n//   <React.StrictMode>\r\n//     <App />\r\n//   </React.StrictMode>,\r\n//   document.getElementById('root')\r\n// );\r\nReactDOM.render(\r\n  <App />, \r\ndocument.getElementById('root'));\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}